export declare type ClearKeyPair = {
    publicKey: JsonWebKey;
    privateKey: JsonWebKey;
    version: number;
};
export declare type EncryptedKeyPairV0 = {
    version: string;
    name?: string;
    iv: string;
    salt: string;
    encryptedKeys?: string;
    encryptedKeyPair?: string;
};
export declare type EncryptedKeyPairV2 = {
    version: number;
    name?: string;
    iv: string;
    salt: string;
    data: string;
};
export declare type EncryptedKeyPair = EncryptedKeyPairV0 | EncryptedKeyPairV2;
export declare class Key {
    private _cryptoKeyPair;
    private _exportableKey?;
    private _exportableEncryptedKey?;
    private _rawPublicKey?;
    constructor(keyPair: CryptoKeyPair, encryptedKeyPair?: EncryptedKeyPairV2);
    getCryptoKeyPair(): CryptoKeyPair;
    seal(pwd: string): Promise<Key>;
    exportKey(): Promise<ClearKeyPair>;
    exportEncryptedKey(): Promise<EncryptedKeyPairV2>;
    getRawPublicKey(): Promise<Uint8Array>;
    getRawPublicKeyHex(delimiter?: string): Promise<string>;
    static createKey(): Promise<Key>;
    static importKey(exportableKey: ClearKeyPair): Promise<Key>;
    static importRawKey(pubKeyRaw: Uint8Array, priKeyRaw: Uint8Array): Promise<Key>;
    static importEncryptedKeyPair(inputEncryptedKeyPair: EncryptedKeyPair, pwd: string): Promise<Key>;
}
//# sourceMappingURL=secretarium.key.d.ts.map