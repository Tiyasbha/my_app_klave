import * as NNG from './nng.websocket';
import { Key } from './secretarium.key';
import { ConnectionState } from './secretarium.constant';
declare type SCPOptions = {
    logger?: {
        log?: (...message: any[]) => void;
        info?: (...message: any[]) => void;
        debug?: (...message: any[]) => void;
        warn?: (...message: any[]) => void;
        error?: (...message: any[]) => void;
    };
};
declare type ErrorHandler = (error: string, requestId: string) => void;
declare type ResultHandler = (result: Record<string, unknown> | string | void, requestId: string) => void;
declare type NaiveHandler = (requestId: string) => void;
interface QueryHandlers {
    onError: (handler: ErrorHandler) => this;
    onResult: (handler: ResultHandler) => this;
}
interface TransactionHandlers extends QueryHandlers {
    onAcknowledged: (handler: NaiveHandler) => this;
    onProposed: (handler: NaiveHandler) => this;
    onCommitted: (handler: NaiveHandler) => this;
    onExecuted: (handler: NaiveHandler) => this;
}
export declare type Query = QueryHandlers & {
    send: () => Promise<Record<string, unknown> | string | void>;
};
export declare type Transaction = TransactionHandlers & {
    send: () => Promise<Record<string, unknown> | string | void>;
};
export declare class SCP {
    private _socket;
    private _connectionState;
    private _onStateChange;
    private _onError?;
    private _requests;
    private _session;
    private _options;
    constructor(options?: SCPOptions);
    reset(options?: SCPOptions): SCP;
    private _updateState;
    private _encrypt;
    private _decrypt;
    private _notify;
    private _computeProofOfWork;
    get state(): ConnectionState;
    get bufferedAmount(): number;
    connect(url: string, userKey: Key, knownTrustedKey: Uint8Array | string, protocol?: NNG.Protocol): Promise<void>;
    onError(handler: (err: string) => void): SCP;
    onStateChange(handler: (state: ConnectionState) => void): SCP;
    newQuery(app: string, command: string, requestId: string, args: Record<string, unknown> | string): Query;
    newTx(app: string, command: string, requestId: string, args: Record<string, unknown> | string): Transaction;
    send(app: string, command: string, requestId: string, args: Record<string, unknown> | string): Promise<void>;
    close(): SCP;
}
export {};
//# sourceMappingURL=secretarium.connector.d.ts.map